# before reading or writing a file, you need to open it
fileobject = open(filename, mode)     # mode is just the file's type and what you want to do with it

# the first letter of the mode in open() is for the operation:
# r is for read
# w is for write. If the file doesn't exist, it's created. If it does exist, it's  overwritten. a
# x means write, but only if the file does NOT already exist
 
# the second letter is for the file's type: 
# t (or just leaving it blank) is for text
# b is for binary

# write a text file with write()
lyrics = '''What was it like to see,
The face of your own stability,
Suddenly walk away,
Leaving you with the dead and hopeless.'''

# write the entire set of lyrics to the file 'jimmy' in one call:
tool = open('jimmy', 'w')
tool.write(lyrics)
tool.close()
# write() returns the # of bytes written, and adds NO spaces or new lines: print() does though

# you can also print() to a text file:
tool = open('jimmy', 'w')
print(lyrics, file = tool)
tool.close()

# print() uses default new spaces and lines unless you tell it not to:
tool = open('jimmy', 'w')
print(lyrics, file = tool, sep='', end='')
tool.close()

# prevent overwriting a file by using MODE X:
tool = open('jimmy', 'x')

# build MODE X into an exception
try:
    tool = open('jimmy', 'x')
    tool.write('stomp stomp stomp')
except FileExistsError:
    print('jimmy already exists! You almost overwrote it!!')
    
# Read a text file with read(), readline(), or readlines() ######################
# read() with no arugments will just read the entire file at once. Not great for large files
tool = open('jimmy', 'rt')
lyrics = tool.read()

# You can provide a max count to limit how much read() returns:
lyrics = ''
tool = open('jimmy', 'rt)
chunk = 100
while True:

# You can provide a max count to limit how much read() returns:
lyrics = ''
tool = open('jimmy', 'rt')
chunk = 100
while True:
    fragment = tool.read(chunk)
    if not fragment:
        break
    lyrics += fragment
tool.close()
len(lyrics)

# you can also read the file line by line with readline()
lyrics = ''
tool = open('jimmy', 'rt')
while True:
    line = tool.readline()
    if not line:
        break
    lyrics += line
tool.close()
len(lyrics)

# the easiest way to read a text file is to use an iterator
lyrics = ''
tool = open('jimmy', 'rt')
for line in tool:
    lyrics += line
    
tool.close()
len(lyrics)

# close files automatically by using with
with open('jimmy', 'rt'):
    tool.write(lyrics)
    
#CSV Files ##################################################################
# read a write a list of rows, each containing a list of columns:
import csv
villains = [
        ['Doctor', 'Doom'],
        ['Wade', 'Davis'],
        ['Mister', 'Sinister'],
        ['Eric', 'Magneto'],
        ]
with open('villains', 'wt') as fout:
    csvout = csv.writer(fout)
    csvout.writerows(villains)
# this creates the villains file, with the first and last names written out
# now we will read this file back in
import csv
with open('villains', 'rt') as fin:     #content manager
    cin = csv.reader(fin)
    villains =  [row for row in cin]   # this uses a list comp
print(villains)

# using reader() & writer() with their default options, the colums are separated by commans and the rows by line feeds
# the data can also be a list of dicts rather than a list of lists
# use DictReader() instead and specify column names
import csv
with open('villains', 'rt') as fin:
    cin = csv.DictReader(fin, fieldnames = ['first', 'last'])
    villains = [row for row in cin]
print(villains)

# we can rewrite the CSV by using the DictWriter() function. 
# And we can use writeheader() to write an initial line of column names to the CSV file
import csv
villains = [
        {'first': 'Doctor', 'last':'Doom'},
        {'first': 'Wade', 'last':'Davis'},
        {'first': 'Mister', 'last':'Sinister'},
        {'first': 'Eric', 'last':'Magneto'},
        ]
with open('villains', 'wt') as fout:
    cout = csv.DictWriter(fout, ['first', 'last'])
    cout.writeheader()
    cout.writerows(villains)
#now read it back
import csv
with open('villains', 'rt') as fin:
    cin = csv.DictReader(fin)
    villains = [row for row in cin]
print(villains)

# relational databases ############################
#DB-API
# this is Python's standard API for accessing relational databases
# main functions:
connect()  #make a connection to the db; can include arugments like username, password, server address etc
cursor()   #creates a cursor object to manage queries
execute() and exectutemany()  #run one of more SQL commands agains the db
fetchone(), fetchmany(), fetchall()  # get the results from execute

#SQLite
#MySQL
#SQLAlchemy
#PostgreSQL
#NoSQL

