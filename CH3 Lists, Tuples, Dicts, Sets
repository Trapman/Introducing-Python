#lists   can be changed
#tuples  are immutable

#(1) Lists
# good for keeping track of things by their order, especially when the order and the contents can change 
# you can always make changes by adding/deleting/overwriting any of the list's contents
# create with [] or list()
empty_list = []
parlay = ['rockets', 'lakers', 'bucks']
# OR
# make_an_empty_list = list()

#list() converts other data types to lists:
list('Mega') # returns ['M', 'e', 'g', 'a']
# convert a tuple into a list: 
      a_tuple = ('brad', 'mega', 'comas')
      list(a_tuple)
      # returns ['brad', 'mega', 'comas']
# use split() to chop a string up into a list:
    birthday = '5/26/84'
    birthday.split('/')
     # returns ['5', '26', '84']
# use indexing [] to grab a single value from a list
      trap_nfl_intel = ['patriots', 'eagles', 'steelers']
      trap_nfl_intel[0]   # returns 'patriots'
      
#Lists of Lists
# lists can contains a bunch of different elements, including other lists
      nba_intel = ['sixers', 'bucks', 'rockets']
      nfl_intel = ['patriots', 'eagles', 'chiefs']
      weekly_intel = [nfl_intel, nba_intel]
      # use slicing:
          weekly_intel[0]   # returns nfl_intel
          weekly_intel[0][0] # returns 'patriots'
       
# change an item in a list by []
      nba_intel = ['sixers', 'rockets', 'bucks']
      nba_intel[1] = 'lakers'
      # returns ['sixers', 'lakers', 'bucks']
      
# use slice[:] to extra items by offset range
      nba_intel[1:2] # returns ['lakers', 'bucks']
      
# append()  adds an item to the end of a list
      nba_intel.append('spurs')    # returns  ['lakers', 'bucks', 'spurs']
      
# extend() or +=  to combine lists
      nba_intel.extend(nfl_intel)  # returns ['lakers', 'bucks', 'spurs', 'patriots', 'eagles', 'chiefs']
      OR
      nba_intel += nfl_intel
      
# add an item by offset with insert()
      # when you use append(), it adds item only to the end of a list. So if you want to add an item in a specific spot, use insert()
      nba_intel.insert(0, 'heat')    # adds 'heat' to offset 0
      nba_intel.insert(2, 'rockets') # adds 'rockets" to offset 2
      
# delete an item by offset with del()
      del[1]  # removes the item at offset 1 from the list
      
# delete an item by value with remove()
      nba_intel.remove('spurs')   # removes 'spurs' from the list, no matter where it is located
      # this is good for when you don't know or care about where a value is located
      
# Get an item by offset and delete it using pop()
      nba_intel.pop()   # pop() by default removes the first item in the list (i.e. is the same as pop(0)
      nba_intel.pop(1)
      
# Find an item's offset by value using index()
      nba_intel.index('bucks')  # returns 1 (i.e. because the 'bucks' are at offset 1)
      
# Test for the existance of a value with in
      'sixers' in nba_intel  # returns True (or False, depending if 'sixers' is in the list)
      
# Count occurences of value by using count()
      nba_intel.count('sixers')  # returns 1
      
# Convert to a string using join()
      nba_intel = ['sixers', 'lakers', 'rockets' 'spurs']
      ','.join(nba_intel)
      # returns 'sixers, 'lakers', 'rockets', 'spurs'
      
# reorder items using sort()
      sorted(nba_intel)  # returns the list sorted by their values (e.g. in this case alphabetical order)
      # use sort(reverse=True) if you want it to be ordered the other way around
      # use sorted_nba_intel = sorted(nba_intel) if you just want a copy and to preserve the original list
      
# Get length by using len()
      len(nba_intel) # returns 4
      
# Assign with = , Copy with copy()
      # when you assign one list to more than one variable, then changing the list in one place changes it in the other
      a = [1, 2, 3]
      b = a
      a[0] = 'bill'
      # when we make this change to [0], it's applied to both a and b. If we call either it'll return ['bill', 2, 3]
      # you can copy the values of a list to an independent list by using any of these methods:
            #1 copy() function
            #2 list() conversion function
            #3 list slice [ : ]
            
      a = [1, 2, 3]
      b = a.copy()
      c = list(a)
      d = a[:]
      # all of these are independent copies of a so we can edit them without affecting a
      
# Tuples: create using tuple()
      #again unlike lists, tuples are immutable and can't be changed so you can't add/delete/etc from them
      
      empty_tuple = ()
      # to make a tuple with one element at a time, follow each element with a comma
      one_nba_intel = 'Lakers',
      one_nba_intel # returns ('Lakers',)
      # to make a tuple with more than one element at a time, follow all but the last element with a comma
      all_nba_intel = 'Lakers', 'Sixers', 'Spurs', 'Heat', 'Rockets
      
      # tuples allow you to assign mulitple variable at once:
      a, b, c, d, e = all_nba_intel
      a #returns 'Lakers'
      b #returns 'Sixers' and so forth
      # this is called TUPLE UNPACKING
      
      # tuple() conversion functions makes tuples from other things
      nba_intel = ['Lakers', 'Sixers', 'Heat']
      tuple(nba_intel) # returns ('Lakers', 'Sixers', 'Heat')
      
# Dictionaries: use {}
      # similar to a list, but the order of the items doesn't matter and they aren't selected by an offset
      # use key, value pairs 
      # dicts are mutable so you can add/del/etc and change them
      
      empty_dict = {}   # create with {}
      
      # use dict() function to convert two-value sequences into a dictionry. First item is used as the key, the second is the value
      nba_intel_rankings = [ [1, 'lakers'], [2, 'clippers'], [3, 'bucks']
      dict(nba_itel_rankings)
            # returns {1: 'lakers', 2: 'clippers', 3: 'bucks'}
      # we will use zip() later on to do this two-item sequence dict creation easier
      
      # add or change an item by KEY
            # just refer to the item by its key and assign a new value
            team_names = {
                        'Shuttleworth': 'David',
                        'Sutton': 'William',
                        'DeStefano': 'Bradley'
                        }
            # change a value:
            team_names['Sutton'] = 'Noke'
       # reminder: dict keys MUST BE UNIQUE
       
       # combine dicts with UPDATE()
            # copies the keys and values of one dict into another dict
            team_names_new = {
                           'Comas': 'Daniel'
                           'Gulli': 'Dom'
                           }
           team_names.update(team_names_new)
           
      # delete an item by key with DEL
      del team_names['DeStefano']
      
      # delete all items by using CLEAR()
      team_names.clear()
      # team_names becomes {}
      
      # test for the existence of a key by using IN
      'Sutton' in team_names # returns True
      
      # Get an item by key
      team_names['Shuttleworth'] # returns 'David'
            # you can also use the GET() function, which will work even if the key doesn't exist
            team_names.get('Comas') #returns 'Dan'
            team_names.get('Le') # returns None
            
      # Get all keys by using KEYS()
      team_names.keys()  
            # returns dict_keys(['Shuttleworth', 'Comas', 'DeStefano'])
                  # note that python 3 by default returns it in this form like dict_keys
                  # if you want a list, then use something like this: list( team_names.keys() )
                        # this will return ['Shuttleworth', 'Comas', 'DeStefano'] and without all the dict_keys[()] stuff
                        
      # Get all values using VALUES()
      team_names.values()
            #returns ['David', 'Daniel', 'Bradley']
            
      # Get all key-value pairs using ITEMS()
      team_names.items()
            #returns [('Shuttleworth', 'David'), ('Comas', 'Daniel'), ('DeStefano', 'Bradley')]
            # in other words it returns each key value as a tuple, such as ('key', 'value')
            
      Assign with =, copy with copy()
      coffee_shops = {'great' : 'la colombe', 'decent': 'joe'}
      coffee_shops['bad'] = 'Dunkin Donuts'
            # now coffee_shops = {'great' : 'la colombe', 'decent': 'joe', 'bad' : 'Dunkin Donuts'}
      original_coffee_shops = coffee_shops.copy()
      
#Sets: use SET()
      # a set is like a dict with its values thrown away, leaving only the keys.
      # just like with dicts, each key must be unique
      # you really only use a set if you want to know that something exists, and nothing else about it. 
      # you use a dict when you want to attach some info to the key as a value
      
      # to create a set, you can use set() function or you can use {}
      empty_set = set()
      OR
      even_numbers = {0, 2, 4, 6, 8}
      
      # convert other data types with set()
      set( 'letters')    # string converted to set
            #returns {'l', 'e', 't', 't', 'e', 'r', 's'}
      set( ['Sixers', 'Spurs', 'Lakers'] )   # list converted to set 
            # returns {'Sixers', 'Spurs', 'Lakers'}
      set( ('Sixers', 'Spurs', 'Lakers') ) # tuple converted to set
      
      # test for value by using IN
            #most common use of a set
            drinks = {
                  'martini': {'vodka', 'vermouth'},
                  'manhattan' : {'rye', 'bitters', 'vermouth'},
                  'screwdriver' : {'orange juice', 'vodka'}
                  }
           for name, contents in drinks.items():
                  if 'vodka' in contents:
                        print(name)
      
      
      
